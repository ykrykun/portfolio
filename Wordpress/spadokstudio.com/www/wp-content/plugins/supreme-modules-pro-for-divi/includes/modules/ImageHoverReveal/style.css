/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
    display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
    position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
    content: attr(data-char);
    position: absolute;
    top: 0;
    left: 0;
    visibility: hidden;
    transition: inherit;
    user-select: none;
}

/* Expanded CSS Variables */

.splitting {
    /* The center word index */
    --word-center: calc((var(--word-total) - 1) / 2);

    /* The center character index */
    --char-center: calc((var(--char-total) - 1) / 2);

    /* The center character index */
    --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
    /* Pecent (0-1) of the word's position */
    --word-percent: calc(var(--word-index) / var(--word-total));

    /* Pecent (0-1) of the line's position */
    --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
    /* Percent (0-1) of the char's position */
    --char-percent: calc(var(--char-index) / var(--char-total));

    /* Offset from center, positive & negative */
    --char-offset: calc(var(--char-index) - var(--char-center));

    /* Absolute distance from center, only positive */
    --distance: calc((var(--char-offset) * var(--char-offset)) / var(--char-center));

    /* Distance from center where -1 is the far left, 0 is center, 1 is far right */
    --distance-sine: calc(var(--char-offset) / var(--char-center));

    /* Distance from center where 1 is far left/far right, 0 is center */
    --distance-percent: calc((var(--distance) / var(--char-center)));
}

.splitting.cells img {
    width: 100%;
    display: block;
}

@supports (display: grid) {
    .splitting.cells {
        position: relative;
        overflow: hidden;
        background-size: cover;
        visibility: hidden;
    }

    .splitting .cell-grid {
        background: inherit;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: grid;
        grid-template: repeat(var(--row-total), 1fr) / repeat(var(--col-total), 1fr);
    }

    .splitting .cell {
        background: inherit;
        position: relative;
        overflow: hidden;
    }

    .splitting .cell-inner {
        background: inherit;
        position: absolute;
        visibility: visible;
        /* Size to fit the whole container size */
        width: calc(100% * var(--col-total));
        height: calc(100% * var(--row-total));
        /* Position properly */
        left: calc(-100% * var(--col-index));
        top: calc(-100% * var(--row-index));
    }

    /* Helper variables for advanced effects */
    .splitting .cell {
        --center-x: calc((var(--col-total) - 1) / 2);
        --center-y: calc((var(--row-total) - 1) / 2);

        /* Offset from center, positive & negative */
        --offset-x: calc(var(--col-index) - var(--center-x));
        --offset-y: calc(var(--row-index) - var(--center-y));

        /* Absolute distance from center, only positive */
        --distance-x: calc((var(--offset-x) * var(--offset-x)) / var(--center-x));

        /* Absolute distance from center, only positive */
        --distance-y: calc((var(--offset-y) * var(--offset-y)) / var(--center-y));
    }
}

.dsm_image_hover_reveal {
    line-height: 0;
    overflow: initial !important;
}

.dsm_image_hover_reveal .et_pb_image_wrap {
    display: inline-block;
    position: relative;
    max-width: 100%;
    width: 100%;
}

.vert-slide-down:hover .cell {
    -webkit-transform: translateY(100%);
    transform: translateY(100%);
}

.vert-slide-up:hover .cell {
    -webkit-transform: translateY(-100%);
    transform: translateY(-100%);
}

.horiz-slide-right:hover .cell {
    -webkit-transform: translateX(100%);
    transform: translateX(100%);
}

.horiz-slide-left:hover .cell {
    -webkit-transform: translateX(-100%);
    transform: translateX(-100%);
}
.dsm_image_hover_reveal .dsm-image-reveal .splitting {
    height: 260px;
}

.dsm_image_hover_reveal .dsm-image-wrapper {
    height: 100%;
}

.dsm_image_hover_reveal .dsm-image-reveal-back {
    display: block;
    width: 100%;
    height: 100%;
    position: absolute;
    background-size: cover;
    top: 0;
    left: 0;
}



.dsm_image_hover_reveal .splitting .cell,
.dsm_image_hover_reveal .splitting .cell__inner,
.dsm_image_hover_reveal .splitting img, .dsm_image_hover_reveal .dsm-image-reveal-back {
    transition: opacity 1s linear, -webkit-transform 1s cubic-bezier(0.63, 0.01, 0.07, 0.99);
    transition: transform 1s cubic-bezier(0.63, 0.01, 0.07, 0.99), opacity 1s linear;
    transition: transform 1s cubic-bezier(0.63, 0.01, 0.07, 0.99), opacity 1s linear, -webkit-transform 1s cubic-bezier(0.63, 0.01, 0.07, 0.99);
    /* No animation on leave */
    transition-delay: calc(0.1s * var(--cell-index));
    /* Reverse the animation */
    transition-delay: calc(0.1s * (var(--cell-total) - var(--cell-index)));
}

.dsm_image_hover_reveal .splitting img, .dsm_image_hover_reveal .dsm-image-reveal-back {
    -webkit-transform: scale(0.8);
    transform: scale(0.8);
    transition-delay: 0s;
    visibility: visible;
    opacity: 0;
}

.dsm_image_hover_reveal:hover .splitting .cell,
.dsm_image_hover_reveal:hover .splitting .cell__inner {
    transition-delay: calc(0.1s * var(--cell-index));
}

.dsm_image_hover_reveal:hover .splitting img, .dsm_image_hover_reveal:hover .dsm-image-reveal-back {
    opacity: 1;
    -webkit-transform: scale(1);
    transform: scale(1);
    transition-delay: calc(0.1s * var(--cell-total));
}