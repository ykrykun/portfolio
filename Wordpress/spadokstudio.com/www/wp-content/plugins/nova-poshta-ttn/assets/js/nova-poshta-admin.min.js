jQuery(document).ready(function () {
    const spinnercolor = jQuery('#spinnercolor');
    if ( spinnercolor.hasOwnProperty('wpColorPicker') ) {
         // Add WP Color Picker dependency for 'Колір спінера в Checkout' plugin setting
        jQuery('#spinnercolor').wpColorPicker();
    }
    var warehouselabel = jQuery('.form-field._billing_address_1_field label').text();
    jQuery('.form-field._billing_address_1_field label').text( warehouselabel + ' / Склад НП');
    var NovaPoshtaSettings = (function ($) {

        var result = {};
        var areaInputName = $('#woocommerce_nova_poshta_shipping_method_area_name');
        var areaInputKey = $('#woocommerce_nova_poshta_shipping_method_area');
        var cityAllInputName = $('#woocommerce_nova_poshta_shipping_method_city_all_name');
        var cityInputName = $('#woocommerce_nova_poshta_shipping_method_city_name');
        var cityInput2Name = $('#_billing_city');
        var cityInput3Name = $('#invoice_no_order_np_shipping_method_city_all_name');  // Якщо створювати накладну без замовлення: назва міста
        var cityInputKey = $('#woocommerce_nova_poshta_shipping_method_city');
        var warehouseInputName = $('#woocommerce_nova_poshta_shipping_method_warehouse_name');
        var warehouseInput2Name = $('#_billing_address_1');
        var warehouseInput3Name = $('#invoice_no_order_np_shipping_method_warehouse_name'); // Якщо створювати накладну без замовлення: назва відділення
        var warehouseInput3Key = $('#invoice_no_order_np_shipping_method_warehouse'); // Якщо створювати накладну без замовлення: ref відділення
        var warehouseInputKey = $('#woocommerce_nova_poshta_shipping_method_warehouse');

        var addressInputName = $('#woocommerce_nova_poshta_shipping_method_address_name');//1
        var addressInputKey = $('#woocommerce_nova_poshta_shipping_method_address');//1

        var useFixedPrice = $("#woocommerce_nova_poshta_shipping_method_use_fixed_price_on_delivery");
        var fixedPrice = jQuery("#woocommerce_nova_poshta_shipping_method_fixed_price");

        var handleUseFixedPriceOnDeliveryChange = function () {
            if (useFixedPrice.prop('checked')) {
                fixedPrice.closest('tr').show();
            } else {
                fixedPrice.closest('tr').hide();
            }
        };

        var initUseFixedPriceOnDelivery = function () {
            // useFixedPrice.change(function () {
            useFixedPrice.on('change', function () {
                handleUseFixedPriceOnDeliveryChange();
            });
            handleUseFixedPriceOnDeliveryChange();
        };

        var initAutocomplete = function () {
          if (typeof areaInputName.autocomplete !== "undefined") {

            areaInputName.autocomplete({
                source: function (request, response) {
                    jQuery.ajax({
                        type: 'POST',
                        url: NovaPoshtaHelper.ajaxUrl,
                        data: {
                            action: NovaPoshtaHelper.getRegionsByNameSuggestionAction,
                            name: request.term
                        },
                        success: function (json) {
                            console.log('response start');
                            console.log(json);
                            console.log('response ends');
                            var data = JSON.parse(json);
                            response(jQuery.map(data, function (description, key) {
                                return {
                                    label: description,
                                    value: key
                                }
                            }));
                        }
                    })
                },
                focus: function (event, ui) {
                    areaInputName.val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    areaInputName.val(ui.item.label);
                    areaInputKey.val(ui.item.value);
                    clearCity();
                    clearWarehouse();
                    return false;
                }
            });

            cityInputName.autocomplete({
                source: function (request, response) {
                    jQuery.ajax({
                        type: 'POST',
                        url: NovaPoshtaHelper.ajaxUrl,
                        data: {
                            action: NovaPoshtaHelper.getCitiesByNameSuggestionAction,
                            name: request.term,
                            parent_ref: areaInputKey.val()
                        },
                        success: function (json) {
                            var data = JSON.parse(json);
                            response(jQuery.map(data, function (description, key) {
                                return {
                                    label: description,
                                    value: key
                                }
                            }));
                        }
                    })
                },
                focus: function (event, ui) {
                    cityInputName.val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    cityInputName.val(ui.item.label);
                    cityInputKey.val(ui.item.value);
                    clearWarehouse();
                    return false;
                }
            });

            cityInput2Name.autocomplete({
                source: function (request, response) {
                    jQuery.ajax({
                        type: 'POST',
                        url: NovaPoshtaHelper.ajaxUrl,
                        data: {
                            action: NovaPoshtaHelper.getCitiesByNameSuggestionAction,
                            name: request.term,
                        },
                        success: function (json) {
                            var data = JSON.parse(json);
                            response(jQuery.map(data, function (description, key) {
                                return {
                                    label: description,
                                    value: key
                                }
                            }));
                        }
                    })
                },
                focus: function (event, ui) {
                    cityInput2Name.val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    var key = (ui.item.value);
                    jQuery('#_billing_address_1').attr('key', key);
                    cityInput2Name.val(ui.item.label);
                    clearWarehouse();
                    return false;
                }
            });

            cityAllInputName.autocomplete({
                minLength: 2,
                delay: 1000,
                source: function (request, response) {
                    jQuery.ajax({
                        type: 'POST',
                        url: NovaPoshtaHelper.ajaxUrl,
                        data: {
                            action: NovaPoshtaHelper.getCitiesByNameSuggestionAction,
                            name: request.term,
                            parent_ref: areaInputKey.val()
                        },
                        success: function (json) {
                            var data = JSON.parse(json);
                            response(jQuery.map(data, function (description, key) {
                                return {
                                    label: description,
                                    value: key
                                }
                            }));
                        }
                    })
                },
                focus: function (event, ui) {
                    cityAllInputName.val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    cityAllInputName.val(ui.item.label);
                    cityInputKey.val(ui.item.value);
                    clearWarehouse();
                    return false;
                }
            });

            warehouseInputName.autocomplete({
                minLength: 0,
                delay: 1000,
                source: function (request, response) {
                    jQuery.ajax({
                        type: 'POST',
                        url: NovaPoshtaHelper.ajaxUrl,
                        data: {
                            action: NovaPoshtaHelper.getWarehousesBySuggestionAction,
                            name: request.term,
                            parent_ref: cityInputKey.val()
                        },
                        success: function (json) {
                          console.log(json);
                            var data = JSON.parse(json);
                            response(jQuery.map(data, function (description, key) {
                                return {
                                    label: description,
                                    value: key
                                }
                            }));
                        }
                    })
                },
                focus: function (event, ui) {
                    warehouseInputName.val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    warehouseInputName.val(ui.item.label);
                    warehouseInputKey.val(ui.item.value);
                    return false;
                }
            });

            warehouseInput2Name.autocomplete({
                source: function (request, response) {
                    jQuery.ajax({
                        type: 'POST',
                        url: NovaPoshtaHelper.ajaxUrl,
                        data: {
                            action: NovaPoshtaHelper.getWarehousesBySuggestionAction,
                            name: request.term,
                            parent_ref: jQuery('#_billing_address_1').attr('key')
                        },
                        success: function (json) {
                          console.log(json);
                            var data = JSON.parse(json);
                            response(jQuery.map(data, function (description, key) {
                                return {
                                    label: description,
                                    value: key
                                }
                            }));
                        }
                    })
                },
                focus: function (event, ui) {
                    warehouseInput2Name.val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    warehouseInput2Name.val(ui.item.label);
                    warehouseInputKey.val(ui.item.value);
                    return false;
                }
            });

            addressInputName.autocomplete({
                source: function (request, response) {


                                    jQuery.ajax({
                                         type: 'POST',
                                         beforeSend: function(xhr) {
                                            xhr.setRequestHeader("Content-type", "application/json;charset=UTF-8");
                                          },
                                         url: 'https://api.novaposhta.ua/v2.0/json/',
                                          data:JSON.stringify({
                                              apiKey: jQuery('#npttnapikey').val(),
                                              modelName: "Address",
                                              calledMethod: "getStreet",
                                              methodProperties: {
                                                CityRef:jQuery("#woocommerce_nova_poshta_shipping_method_city").val(),
                                                Limit: 555
                                              }
                                          }),
                                          success: function (json) {
                                            console.log(json);
                                              var data = json.data;
                                              response(jQuery.map(data, function (obj, key) {
                                                console.log(obj);
                                                //console.log(key);
                                                searchval = obj.StreetsType + "" +obj.Description;
                                                if( searchval.includes( jQuery('#woocommerce_nova_poshta_shipping_method_address_name').val() )){
                                                  return {
                                                      label: obj.StreetsType + " " +obj.Description,
                                                      value: obj.Ref
                                                  }
                                                }
                                              }));
                                          }
                                     })
                },
                focus: function (event, ui) {
                    addressInputName.val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    addressInputName.val(ui.item.label);
                    addressInputKey.val(ui.item.value);
                    return false;
                }
            });

            cityInput3Name.autocomplete({ // Tab: 'Створити Накладну', block: 'Одержувач', поле: 'Місто'
                minLength: 2,
                delay: 1000,
                source: function (request, response) {
                    jQuery.ajax({
                        type: 'POST',
                        url: NovaPoshtaHelper.ajaxUrl,
                        data: {
                            action: NovaPoshtaHelper.getCitiesByNameSuggestionAction,
                            name: request.term,
                            parent_ref: areaInputKey.val()
                        },
                        success: function (json) {
                            var data = JSON.parse(json);
                            response(jQuery.map(data, function (description, key) {
                                return {
                                    label: description,
                                    value: key
                                }
                            }));
                        }
                    })
                },
                focus: function (event, ui) {
                    cityInput3Name.val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    var key = (ui.item.value); // Запам'ятовуємо ref обраного міста в змінну key
                    warehouseInput3Name.attr('key', key); // Додаємо атрибут key = ref міста до поля 'Відділення/Поштомат'
                    cityInput3Name.val(ui.item.label); // Виводимо назву обраного міста
                    clearWarehouse();
                    return false;
                }
            });

            warehouseInput3Name.autocomplete({ // Tab: 'Створити Накладну', block: 'Одержувач', поле: 'Відділення/Поштомат'
                minLength: 0,
                delay: 1000,
                source: function (request, response) {
                    jQuery.ajax({
                        type: 'POST',
                        url: NovaPoshtaHelper.ajaxUrl,
                        data: {
                            action: NovaPoshtaHelper.getWarehousesBySuggestionAction,
                            name: request.term,
                            parent_ref: warehouseInput3Name.attr('key') // Шукаємо всі відділення в БД з parent_ref == ref міста, обраного раніше
                        },
                        success: function (json) {
                          console.log(json);
                            var data = JSON.parse(json);
                            response(jQuery.map(data, function (description, key) {
                                return {
                                    label: description,
                                    value: key
                                }
                            }));
                        }
                    })
                },
                focus: function (event, ui) {
                    warehouseInput3Name.val(ui.item.label);
                    return false;
                },
                select: function (event, ui) {
                    warehouseInput3Name.val(ui.item.label); // Виводимо назву обраного відділення/поштомату
                    warehouseInput3Key.val(ui.item.value); // Запам'ятовуємо ref відділення в приховане input-поле
                    return false;
                }
            });

          }
          else{
            console.log('autocompete undefined');
          }


        };

        var clearCity = function () {
            cityInputName.val('');
            cityInputKey.val('');
        };

        var clearWarehouse = function () {
            warehouseInputName.val('');
            warehouseInputKey.val('');
        };
        var clearAddress = function () {
            addressInputName.val('');
            addressInputKey.val('');
        };

        var hideKeyRows = function () {
            $('.js-hide-nova-poshta-option').closest('tr').addClass('nova-poshta-option-hidden');
        };

        var initRating = function () {
            $('a.np-rating-link').on('click', function () {
                var link = $(this);
                $.ajax({
                    type: 'POST',
                    url: NovaPoshtaHelper.ajaxUrl,
                    data: {
                        action: NovaPoshtaHelper.markPluginsAsRated
                    },
                    success: function (json) {
                        var data = JSON.parse(json);
                        if (data.result) {
                            link.parent().text(data.message);
                        }
                    }
                });
                return true;
            });
        };

        result.init = function () {
            initAutocomplete();
            hideKeyRows();
            initUseFixedPriceOnDelivery();
            initRating();
        };

        return result;

    }(jQuery));
    NovaPoshtaSettings.init();
});

// WooCommerce > Orders > 'Доставка в' (Shipping to) column info and writes in 'wp_novaposhta_ttn_invoices' DB table (Vue.js)
var el = document.getElementById('invoice_sender_ref');
if ( "morkvanp_invoice" == location.search.split('page=')[1] && el ) {
    el.addEventListener('change', function(e){
      var phone = el.options[el.selectedIndex].getAttribute('phone');
      var phoneel = document.getElementById('sender_phone');
      phoneel.value = phone;
      console.log(phone);
      var namero = el.options[el.selectedIndex].getAttribute('namero');
      var sender_name = document.getElementById('sender_name');
      sender_name.value = namero;
    });
}

jQuery(document).ready(function () {
    if (location.search.indexOf('page=morkvanp_plugin') !== -1) { // Only 'Налаштування' tab

        showMrkvUpdateDbTablesSpinner = function() { // Show spinner after 'Оновити' button on 'Налаштування' tab
            let protocol = jQuery(location).attr('protocol'); // http or https
            let host = jQuery(location).attr('host'); // example.com
            // Get spinner gif-file data
            let spinnerUrl = protocol + '\/\/' + host + '/wp-content/plugins/nova-poshta-ttn/includes/img/spinner.gif';
            let image = new Image();
            image.src = spinnerUrl;
            // Activate spinner
            jQuery('#mrkvupdatedbloader').css({"margin-left":"5px"});
            jQuery('#mrkvupdatedbloader').append(image);
        }
    }

});
